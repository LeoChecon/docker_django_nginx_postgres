version: "3.8"

services:
  database:
    image: database_ctn
    build:
      context: .
      dockerfile: _postgres.Dockerfile
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - internal
    volumes:
      - db:/var/lib/postgresql/data
    secrets:
      - database_name
      - database_user
      - database_password
    environment:
      - POSTGRES_DB_FILE=/run/secrets/database_name
      - POSTGRES_USER_FILE=/run/secrets/database_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/database_password
    ports:
      - 5555:5432
    # user: postgres
    # healthcheck:
    #   test: ["CMD-SHELL", "/usr/bin/pg_isready", "-d", "docker_django_db"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 10
    #   start_period: 10s
  webserver:
    image: webserver_ctn
    build: 
      context: .
      dockerfile: _nginx.Dockerfile
    volumes:
      - type: bind
        target: /opt/static/
        source: docker_django/static/
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 45s
        max_attempts: 3
        window: 120s
    networks:
      - internal
      - public
    ports:
      - 8080:80
    depends_on:
      - django
  django:
    image: django_ctn
    build: 
      context: .
      dockerfile: _django.Dockerfile
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
        window: 120s
    networks:
      - internal
    secrets:
      - database_name
      - database_user
      - database_password
      - django_key
    environment:
      - DATABASE_NAME_FILE=/run/secrets/database_name
      - DATABASE_USER_FILE=/run/secrets/database_user
      - DATABASE_PASSWORD_FILE=/run/secrets/database_password
      - DJANGO_KEY_FILE=/run/secrets/django_key
      - USE_CONTAINER_DB=True # True (default) => Use 'database' service  | False => Use SQLite 
    depends_on:
      - database    # docker swarm
      # database:   # docker compose
      #   condition: service_healthy
volumes:
  db:
networks:
  internal:
    driver: overlay   # docker swarm
  public:
    driver: overlay   # docker swarm
secrets:
  database_password:
    file: secret_files/database_password.txt
  database_user:
    file: secret_files/database_user.txt
  database_name:
    file: secret_files/database_name.txt
  django_key:
    file: secret_files/django_key.txt